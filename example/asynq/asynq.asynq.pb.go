// Code generated by protoc-gen-saber-asynq. DO NOT EDIT.
// versions:
//   - protoc-gen-saber-asynq v0.5.0
//   - protoc                 v4.24.0
// source: asynq.proto

package asynq

import (
	context "context"
	json "encoding/json"
	errors "errors"
	asynq "github.com/hibiken/asynq"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = asynq.NewServeMux
var _ = new(emptypb.Empty)

const Pattern_User_CreateUser = "user:create"
const Pattern_User_UpdateUser = "user:update"
const CronSpec_User_UpdateUser = "@every 120s"

type UserTaskHandler interface {
	// CreateUser 异步创建用户
	// #[asynq]
	// #[asynq(pattern="user:create")]
	CreateUser(context.Context, *CreateUserPayload) error
	// UpdateUser 异步更新用户
	// #[asynq]
	// #[asynq(pattern="user:update")]
	// #[asynq(cron_spec="@every 120s")]
	UpdateUser(context.Context, *UpdateUserPayload) error
}

func RegisterUserTaskHandler(mux *asynq.ServeMux, srv UserTaskHandler) {
	mux.HandleFunc(Pattern_User_CreateUser, _User_CreateUser_Task_Handler(srv))
	mux.HandleFunc(Pattern_User_UpdateUser, _User_UpdateUser_Task_Handler(srv))
}

func _User_CreateUser_Task_Handler(srv UserTaskHandler) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in CreateUserPayload

		if err := json.Unmarshal(task.Payload(), &in); err != nil {
			return err
		}
		return srv.CreateUser(ctx, &in)
	}
}

func _User_UpdateUser_Task_Handler(srv UserTaskHandler) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in UpdateUserPayload

		if err := json.Unmarshal(task.Payload(), &in); err != nil {
			return err
		}
		return srv.UpdateUser(ctx, &in)
	}
}

type UserTaskClient interface {
	// CreateUser 异步创建用户
	// #[asynq]
	// #[asynq(pattern="user:create")]
	CreateUser(context.Context, *CreateUserPayload, ...asynq.Option) (*asynq.TaskInfo, error)
	// UpdateUser 异步更新用户
	// #[asynq]
	// #[asynq(pattern="user:update")]
	// #[asynq(cron_spec="@every 120s")]
	UpdateUser(context.Context, *UpdateUserPayload, ...asynq.Option) (*asynq.TaskInfo, error)
}

type UserTaskClientImpl struct {
	cc *asynq.Client
}

// NewUserTaskClient new client.
func NewUserTaskClient(client *asynq.Client) UserTaskClient {
	return &UserTaskClientImpl{
		cc: client,
	}
}

// CreateUser 异步创建用户
// #[asynq]
// #[asynq(pattern="user:create")]
func (c *UserTaskClientImpl) CreateUser(ctx context.Context, in *CreateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	payload, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	task := asynq.NewTask(Pattern_User_CreateUser, payload, opts...)
	return c.cc.Enqueue(task)
}

// UpdateUser 异步更新用户
// #[asynq]
// #[asynq(pattern="user:update")]
// #[asynq(cron_spec="@every 120s")]
func (c *UserTaskClientImpl) UpdateUser(ctx context.Context, in *UpdateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	payload, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	task := asynq.NewTask(Pattern_User_UpdateUser, payload, opts...)
	return c.cc.Enqueue(task)
}

func RegisterScheduler_User_UpdateUser(scheduler *asynq.Scheduler, in *UpdateUserPayload, opts ...asynq.Option) (entryId string, err error) {
	payload, err := json.Marshal(in)
	if err != nil {
		return "", err
	}
	return scheduler.Register(CronSpec_User_UpdateUser, asynq.NewTask(Pattern_User_UpdateUser, payload, opts...))
}
