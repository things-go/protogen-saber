// Code generated by protoc-gen-saber-asynq. DO NOT EDIT.
// versions:
//   - protoc-gen-saber-asynq v0.0.2
//   - protoc            v3.21.2
// source: asynq.proto

package asynq

import (
	context "context"
	errors "errors"
	asynq "github.com/hibiken/asynq"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = asynq.NewServeMux
var _ = new(emptypb.Empty)
var _ = proto.Reset

const Pattern_User_CreateUser = "user:create"
const Pattern_User_UpdateUser = "user:update"

type UserTaskHandler interface {
	// CreateUser 异步创建用户
	CreateUser(context.Context, *CreateUserPayload) error
	// UpdateUser 异步更新用户
	UpdateUser(context.Context, *UpdateUserPayload) error
	// UnmarshalBinary parses the binary data and stores the result
	// in the value pointed to by v.
	UnmarshalBinary([]byte, any) error
}

type UnimplementedUserTaskHandlerImpl struct{}

func (*UnimplementedUserTaskHandlerImpl) UnmarshalBinary(b []byte, v any) error {
	return proto.Unmarshal(b, v.(proto.Message))
}

func RegisterUserTaskHandler(mux *asynq.ServeMux, srv UserTaskHandler) {
	mux.HandleFunc(Pattern_User_CreateUser, _User_CreateUser_Task_Handler(srv))
	mux.HandleFunc(Pattern_User_UpdateUser, _User_UpdateUser_Task_Handler(srv))
}

func _User_CreateUser_Task_Handler(srv UserTaskHandler) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in CreateUserPayload

		if err := srv.UnmarshalBinary(task.Payload(), &in); err != nil {
			return err
		}
		return srv.CreateUser(ctx, &in)
	}
}

func _User_UpdateUser_Task_Handler(srv UserTaskHandler) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in UpdateUserPayload

		if err := srv.UnmarshalBinary(task.Payload(), &in); err != nil {
			return err
		}
		return srv.UpdateUser(ctx, &in)
	}
}

type UserTaskClient interface {
	// SetMarshaler set marshal the binary encoding of v function.
	SetMarshaler(func(any) ([]byte, error)) UserTaskClient
	// CreateUser 异步创建用户
	CreateUser(context.Context, *CreateUserPayload, ...asynq.Option) (*asynq.TaskInfo, error)
	// UpdateUser 异步更新用户
	UpdateUser(context.Context, *UpdateUserPayload, ...asynq.Option) (*asynq.TaskInfo, error)
}

type UserTaskClientImpl struct {
	cc        *asynq.Client
	marshaler func(any) ([]byte, error)
}

// NewUserTaskClient new client. use default proto.Marhsal.
func NewUserTaskClient(client *asynq.Client) UserTaskClient {
	return &UserTaskClientImpl{
		cc: client,
		marshaler: func(v any) ([]byte, error) {
			return proto.Marshal(v.(proto.Message))
		},
	}
}

// SetMarshaler set marshal the binary encoding of v function.
func (c *UserTaskClientImpl) SetMarshaler(marshaler func(any) ([]byte, error)) UserTaskClient {
	if marshaler != nil {
		c.marshaler = marshaler
	}
	return c
}

// CreateUser 异步创建用户
func (c *UserTaskClientImpl) CreateUser(ctx context.Context, in *CreateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	payload, err := c.marshaler(in)
	if err != nil {
		return nil, err
	}
	task := asynq.NewTask(Pattern_User_CreateUser, payload, opts...)
	taskInfo, err := c.cc.Enqueue(task)
	if err != nil {
		return nil, err
	}
	return taskInfo, nil
}

// UpdateUser 异步更新用户
func (c *UserTaskClientImpl) UpdateUser(ctx context.Context, in *UpdateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	payload, err := c.marshaler(in)
	if err != nil {
		return nil, err
	}
	task := asynq.NewTask(Pattern_User_UpdateUser, payload, opts...)
	taskInfo, err := c.cc.Enqueue(task)
	if err != nil {
		return nil, err
	}
	return taskInfo, nil
}
